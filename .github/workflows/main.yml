name: "main"

on: workflow_dispatch

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above)
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "ubuntu-22.04-arm"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      # --- Setup Node (macOS/Windows only) ---
      - name: setup node (macOS/Windows only)
        if: matrix.platform != 'ubuntu-22.04' && matrix.platform != 'ubuntu-22.04-arm'
        uses: actions/setup-node@v4 
        with: 
          node-version: lts/*

      - name: install pnpm (macOS/Windows only)
        if: matrix.platform != 'ubuntu-22.04' && matrix.platform != 'ubuntu-22.04-arm'
        uses: pnpm/action-setup@v4.1.0
        with:
          version: latest

      # --- Rust setup ---
      - name: install Rust nightly
        if: matrix.platform != 'ubuntu-22.04' && matrix.platform != 'ubuntu-22.04-arm'
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        if: matrix.platform != 'ubuntu-22.04' && matrix.platform != 'ubuntu-22.04-arm'
        uses: swatinem/rust-cache@v2

      # --- Frontend build only for macOS and Windows ---
      - name: install frontend dependencies and build CLI
        if: matrix.platform != 'ubuntu-22.04' && matrix.platform != 'ubuntu-22.04-arm'
        env: 
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        run: |
          cd GUI
          pnpm install
          cd ..
          cargo xtask build-all
          mkdir -p dist
          cp target/release/ninja* dist/

      # --- Ubuntu builds using Dockerfile ---
      - name: Build using Docker (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' || matrix.platform == 'ubuntu-22.04-arm'
        run: |
          docker build -f Dockerfile -t --build-arg SIGNING_KEY=${{ secrets.TAURI_SIGNING_PRIVATE_KEY }} ninja-build .
          docker run --rm -v $(pwd)/dist:/dist ninja-build bash -c "cp /build/target/release/ninja* /dist/"

      # --- Upload built artifacts ---
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: dist/

  release:
    needs: publish-tauri
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Ninja v${{ github.run_number }}"
          body: |
            ðŸš€ Automatic release build.
            Includes binaries for macOS (Intel + ARM), Windows, and Linux.
          files: |
            artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

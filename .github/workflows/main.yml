name: "main"

on: workflow_dispatch

jobs:
  build:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
          - platform: "ubuntu-22.04"
          - platform: "ubuntu-22.04-arm"
          - platform: "windows-latest"

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: setup uv (macOS/Windows only)
        if: matrix.platform != 'ubuntu-22.04' && matrix.platform != 'ubuntu-22.04-arm'
        uses: astral-sh/setup-uv@v6

      - name: Install python (macOS/Windows only)
        if: matrix.platform != 'ubuntu-22.04' && matrix.platform != 'ubuntu-22.04-arm'
        run: uv python install

      # --- Setup Node (macOS/Windows only) ---
      - name: setup node (macOS/Windows only)
        if: matrix.platform != 'ubuntu-22.04' && matrix.platform != 'ubuntu-22.04-arm'
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install pnpm
        if: matrix.platform != 'ubuntu-22.04' && matrix.platform != 'ubuntu-22.04-arm'
        uses: pnpm/action-setup@v4.1.0
        with:
          version: latest

      # --- Rust setup (still needed for library build) ---
      - name: install Rust nightly
        if: matrix.platform != 'ubuntu-22.04' && matrix.platform != 'ubuntu-22.04-arm'
        uses: dtolnay/rust-toolchain@nightly

      - name: Rust cache
        if: matrix.platform != 'ubuntu-22.04' && matrix.platform != 'ubuntu-22.04-arm'
        uses: swatinem/rust-cache@v2

      # --- Frontend build (macOS/Windows) ---
      - name: install frontend deps and build the app (macOS)
        if: matrix.platform != 'ubuntu-22.04' && matrix.platform != 'ubuntu-22.04-arm' && matrix.platform != 'windows-latest'
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        run: |
          cd GUI
          pnpm install
          cd ..
          uv run build.py
          mkdir -p dist
          find target/release/bundle -mindepth 2 -maxdepth 2 -type f \
          ! -name "bundle_dmg.sh" \
          ! -name "icon.icns" \
          ! -name "Ninja.app.tar.gz*" \
          -exec cp {} dist/ \;

      - name: install deps and build the app (Windows)
        if: matrix.platform == 'windows-latest'
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
        run: |
          # Add cargo bin to PATH
          $env:Path = "$env:USERPROFILE\.cargo\bin;$env:Path"
        
          cd GUI
          pnpm install
          cd ..
          uv run build.py

          mkdir dist
          Get-ChildItem -Path 'target/release/bundle' -Recurse -Depth 2 -File | Where-Object { $_.Extension -in '.exe', '.msi' } | ForEach-Object { Copy-Item $_.FullName -Destination 'dist' }


      # --- Ubuntu builds using Docker ---
      - name: Build using Docker (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04' || matrix.platform == 'ubuntu-22.04-arm'
        run: |
          echo "${{secrets.TAURI_SIGNING_PRIVATE_KEY}}" > tauri_signing_key.pem
          DOCKER_BUILDKIT=1 docker build \
            --secret id=tauri_key,src=tauri_signing_key.pem \
            -t ninja:latest .
          docker run --rm -v $(pwd)/dist:/dist ninja:latest bash -c 'find /build/target/release/bundle -mindepth 2 -maxdepth 2 -type f -exec cp {} /dist/ \;'

      # --- Upload artifacts ---
      - name: Upload build artifacts for Windows and Ubuntu
        if: matrix.platform != 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: dist/

      - name: Upload build artifacts for macOS
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: dist/
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - run: mkdir artifacts

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      # --- Collect signatures for release body ---
      - name: Collect signatures for release body
        id: signatures
        run: |
          echo "### Digital Signatures" > release_body.txt
          echo "" >> release_body.txt

          find artifacts -type f -name "*.sig" | sort | while read sigfile; do
            base=$(basename "$sigfile" .sig)
            echo "#### $base" >> release_body.txt
            echo '```' >> release_body.txt
            cat "$sigfile" >> release_body.txt
            echo -e "\n" >> release_body.txt
            echo '```' >> release_body.txt
            echo "" >> release_body.txt
            echo -e "\n" >> release_body.txt
          done

          echo "" >> release_body.txt
          echo "All signatures are verified and generated automatically during CI." >> release_body.txt

          # Save the content to an output so it can be used in env
          echo "description<<EOF" >> $GITHUB_ENV
          cat release_body.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # --- Create GitHub Release ---
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: "Ninja v${{ github.run_number }}"
          body: ${{ env.description }}
          files: |
            artifacts/**/Ninja*.exe
            artifacts/**/Ninja*.msi
            artifacts/**/Ninja*.dmg
            artifacts/**/Ninja*.deb
            artifacts/**/Ninja*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
